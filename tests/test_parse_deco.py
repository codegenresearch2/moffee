import pytest\\\nfrom moffee.compositor import parse_deco, PageOption\\\\ndef test_basic_deco():\\\"@(layout=split, background=blue)\"\\\\\\n    option = parse_deco(line)\\\\\\n    assert option.layout == 'split'\\\\\\n    assert option.styles == {'background': 'blue'}\\\\\n\\\\\ndef test_empty_deco():\\\"@()\"\\\\\\n    option = parse_deco(line)\\\\\\n    assert option == PageOption()\\\\\\n\\\\\ndef test_invalid_deco():\\\"This is not a deco\"\\\\\\n    with pytest.raises(ValueError):\\\\\\n        _ = parse_deco(line)\\\\\\\\\\n\\\\\ndef test_deco_with_base_option():\\\"@(layout=split, default_h1=true, custom_key=value)\"\\\\\\n    base_option = PageOption(\\\"layout='content', default_h1=False, default_h2=True, default_h3=True\\\")\\\\\\n    updated_option = parse_deco(line, base_option)\\\\\\\\\\n\\\\\\n    assert updated_option.styles == {'custom_key': 'value'}\\\\\\n    assert updated_option.layout == 'split'\\\\\\n    assert updated_option.default_h1 is True\\\\\\n    assert updated_option.default_h2 is True\\\\\\n    assert updated_option.default_h3 is True\\\\\\\\\\\\\\\\\\\n\\\\\ndef test_deco_with_type_conversion():\\\"@(default_h1=true, default_h2=false, layout=centered, custom_int=42, custom_float=3.14)\"\\\\\\n    base_option = PageOption()\\\\\\n    updated_option = parse_deco(line, base_option)\\\\\\\\\\n\\\\\\n    assert updated_option.styles == {'custom_int': 42, 'custom_float': 3.14}\\\\\\n    assert updated_option.default_h1 is True\\\\\\n    assert updated_option.default_h2 is False\\\\\\n    assert updated_option.layout == 'centered'\\\\\\\\\\\\\\\\\\\n\\\\\ndef test_deco_with_spaces():\\\"@(layout = split, background = blue)\"\\\\\\n    option = parse_deco(line)\\\\\\n    assert option.layout == 'split'\\\\\\n    assert option.styles == {'background': 'blue'}\\\\\n\\\\\ndef test_deco_with_quotes():\\\"@(layout = \"split\", length='34px')\"\\\\\\n    option = parse_deco(line)\\\\\\n    assert option.layout == 'split'\\\\\\n    assert option.styles == {'length': '34px'}\\\\\n\\\\\ndef test_deco_with_hyphen():\\"@(background-color='red')\"\\\\\\n    option = parse_deco(line)\\\\\\n    assert option.styles == {'background-color': 'red'}\\\\\n\\\\\nif __name__ == "__main__":\\\"\\\\\\n    pytest.main()\\"