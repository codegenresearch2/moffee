import pytest\nfrom moffee.utils.md_helper import (\n    is_comment,\n    is_empty,\n    get_header_level,\n    is_divider,\n    contains_image,\n    contains_deco,\n    extract_title,\n    rm_comments\n)\n\n\ndef test_is_comment():\n    assert is_comment("<!-- This is a comment -->")\n    assert not is_comment("This is not a comment")\n\n\ndef test_is_empty():\n    assert is_empty("<!-- This is a comment -->")\n    assert not is_empty("This is not a comment")\n    assert is_empty(" \n")\n\n\ndef test_get_header_level():\n    assert get_header_level("# Header 1") == 1\n    assert get_header_level("### Header 3") == 3\n    assert get_header_level("Normal text") == 0\n    assert get_header_level("####### Not a valid header") == 0\n\n\ndef test_is_divider():\n    assert is_divider("---") == True\n    assert is_divider("***") == True\n    assert is_divider("___") == True\n    assert is_divider("  ----  ") == True\n    assert is_divider("--") == False\n    assert is_divider("-\n-\n-") == False\n    assert is_divider("This is not a divider") == False\n    assert is_divider("***", type="*") == True\n    assert is_divider("***", type="-") == False\n    assert is_divider("* * *", type="*") == False\n\n\ndef test_contains_image():\n    assert contains_image("![Alt text](image.jpg)") == True\n    assert contains_image("This is an image: ![Alt text](image.jpg)") == True\n    assert contains_image("This is not an image") == False\n    assert contains_image("![](image.jpg)") == True\n    assert contains_image("![]()") == True\n\n\ndef test_contains_deco():\n    assert contains_deco("@(layout=split, background=blue)") == True\n    assert contains_deco("  @(layout=default)  ") == True\n    assert contains_deco("This is not a deco") == False\n    assert contains_deco("@()") == True\n\n\ndef test_extract_title():\n    assert extract_title("# Main Title\nSome content") == "Main Title"\n    assert extract_title("## Secondary Title\nSome content") == "Secondary Title"\n    assert extract_title("# Main Title\n## Secondary Title\nSome content") == "Main Title"\n    assert extract_title("## Secondary Title\n# Main Title\nSome content") == "Secondary Title"\n    assert extract_title("Some content without headings") is None\n    assert extract_title("\n") is None\n    assert extract_title("#  Title with spaces  \nContent") == "Title with spaces"\n    multi_para = "Para 1\n\nPara 2\n\n# Actual Title\nContent"\n    assert extract_title(multi_para) == "Actual Title"\n\n\ndef test_remove_html_comments():\n    markdown = "\n        # Title\n        <!-- This is a comment -->\n        Normal text.\n        <!--\n        This is a\n        multi-line comment\n        -->\n        More text.\n        \""\n        expected = "\n        # Title\n        Normal text.\n        More text.\n        \""\n        assert multi_strip(rm_comments(markdown)) == multi_strip(expected)\n\n\ndef test_remove_single_line_comments():\n    markdown = "\n        # Title\n        %% This is a comment\n        Normal text.\n        %% Another comment\n        More text.\n        \""\n        expected = "\n        # Title\n        Normal text.\n        More text.\n        \""\n        assert multi_strip(rm_comments(markdown)) == multi_strip(expected)\n\n\ndef test_remove_all_types_of_comments():\n    markdown = "\n        # Title\n        <!-- HTML comment -->\n        Normal text.\n        %% Single line comment\n        <!--\n        Multi-line\n        HTML comment\n        -->\n        More text.\n        Final text.\n        \""\n        expected = "\n        # Title\n        Normal text.\n        More text.\n        Final text.\n        \""\n        assert multi_strip(rm_comments(markdown)) == multi_strip(expected)\n\n\ndef test_no_comments():\n    markdown = "\n        # Title\n        This is a normal Markdown\n        document with no comments.\n        \""\n        assert multi_strip(rm_comments(markdown)) == multi_strip(markdown)\n