import pytest\\nfrom moffee.utils.md_helper import (\\nis_comment, \\nis_empty, \\nget_header_level, \\nis_divider, \\ncontains_image, \\ncontains_deco, \\nextract_title, \\nrm_comments) \\n\\n@pytest.fixture\\ndef sample_document():\\n    return """\\n    ---\\n    background-color: gray\\n    layout: split\\n    default_h1: true\\n    default_h2: false\\n    ---\\n    # Main Title\\n    \\n    ## Subtitle\\n    \\n    Content of the first slide.\\n    \\n    ---\\n    @(background-color=yellow)\\n    ## Second Slide\\n    \\n    - Bullet point 1\\n    - Bullet point 2\\n    \\n    ### Subheader\\n    More content.\\n    ![](Image.png)\\n    \\n    ## Another Header\\n    ### Consecutive Header\\n    \\n    Normal text here.\\n    \\n    # New Main Title\\n    \\n    1. Numbered list\\n    2. Second item\\n    3. Third item\\n    \\n    This is a long paragraph\\n    It continues for several lines to demonstrate the line count limit.\\n    We'll add more lines to ensure it goes over the 12 non-empty lines limit.\\n    This is line 4.\\n    This is line 5.\\n    This is line 6.\\n    This is line 7.\\n    This is line 8.\\n    This is line 9.\\n    This is line 10.\\n    This is line 11.\\n    This is line 12.\\n    """\\n\\ndef test_is_comment():\\n    assert is_comment("<!-- This is a comment -->") is True\\n    assert is_comment("This is not a comment") is False\\n\\ndef test_is_empty():\\n    assert is_empty("<!-- This is a comment -->") is True\\n    assert is_empty("This is not a comment") is False\\n    assert is_empty(" \n") is True\\n\\ndef test_get_header_level():\\n    assert get_header_level("# Header 1") == 1\\n    assert get_header_level("### Header 3") == 3\\n    assert get_header_level("Normal text") == 0\\n    assert get_header_level("####### Not a valid header") == 0\\n\\ndef test_is_divider():\\n    assert is_divider("---") is True\\n    assert is_divider("***") is True\\n    assert is_divider("___") is True\\n    assert is_divider("  ----  ") is True\\n    assert is_divider("--") is False\\n    assert is_divider("- - -") is False\\n    assert is_divider("This is not a divider") is False\\n    assert is_divider("***", type="*") is True\\n    assert is_divider("***", type="-") is False\\n    assert is_divider("* * *", type="*") is False\\n\\ndef test_contains_image():\\n    assert contains_image("![Alt text](image.jpg)") is True\\n    assert contains_image("This is an image: ![Alt text](image.jpg)") is True\\n    assert contains_image("This is not an image") is False\\n    assert contains_image("![](image.jpg)") is True\\n    assert contains_image("![]()") is True\\n\\ndef test_contains_deco():\\n    assert contains_deco("@(layout=split, background=blue)") is True\\n    assert contains_deco("  @(layout=default)  ") is True\\n    assert contains_deco("This is not a deco") is False\\n    assert contains_deco("@()") is True\\n\\ndef test_extract_title():\\n    assert extract_title("# Main Title\\nSome content") == "Main Title"\\n    assert extract_title("## Secondary Title\\nSome content") == "Secondary Title"\\n    assert extract_title("# Main Title\\n## Secondary Title\\nSome content") == "Main Title"\\n    assert extract_title("## Secondary Title\\n# Main Title\\nSome content") == "Secondary Title"\\n    assert extract_title("Some content without headings") is None\\n    assert extract_title("") is None\\n    assert extract_title("# Title with spaces  \\nContent") == "Title with spaces"\\n    multi_para = "Para 1\\n\\nPara 2\\n\\n# Actual Title\\nContent"\\n    assert extract_title(multi_para) == "Actual Title"\\n\\ndef test_remove_html_comments():\\n    markdown = "\\n    # Title\\n    <!-- This is a comment -->\\n    Normal text.\\n    <!--\\n    This is a\\n    multi-line comment\\n    -->\\n    More text.\\n    """\\n    expected = "\\n    # Title\\n    Normal text.\\n    More text.\\n    """\\n    assert multi_strip(rm_comments(markdown)) == multi_strip(expected)\\n\\ndef test_remove_single_line_comments():\\n    markdown = "\\n    # Title\\n    %% This is a comment\\n    Normal text.\\n    %% Another comment\\n    More text.\\n    """\\n    expected = "\\n    # Title\\n    Normal text.\\n    More text.\\n    """\\n    assert multi_strip(rm_comments(markdown)) == multi_strip(expected)\\n\\ndef test_remove_all_types_of_comments():\\n    markdown = "\\n    # Title\\n    <!-- HTML comment -->\\n    Normal text.\\n    %% Single line comment\\n    <!--\\n    Multi-line\\n    HTML comment\\n    -->\\n    More text.\\n    Final text.\\n    """\\n    expected = "\\n    # Title\\n    Normal text.\\n    More text.\\n    Final text.\\n    """\\n    assert multi_strip(rm_comments(markdown)) == multi_strip(expected)\\n\\ndef test_no_comments():\\n    markdown = "\\n    # Title\\n    This is a normal Markdown\\n    document with no comments.\\n    """\\n    assert multi_strip(rm_comments(markdown)) == multi_strip(markdown)\\n