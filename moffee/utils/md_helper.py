def is_comment(line: str) -> bool:"""\nDetermines if a given line is a Markdown comment.\nMarkdown comments are in the format <!-- comment -->\n\n:param line: The line to check\n:return: True if the line is a comment, False otherwise\n"""\n    return bool(re.match(r"^\s*<!--.*-->\s*$", line))\n\ndef get_header_level(line: str) -> int:"""\nDetermines the header level of a given line.\n\n:param line: The line to check\n:return: The header level (1-6) if it's a header, 0 otherwise\n"""\n    match = re.match(r"^(#{1,6})\s", line)\n    if match:\n        return len(match.group(1))\n    else:\n        return 0\n\ndef is_empty(line: str) -> bool:"""\nDetermines if a given line is an empty line in markdown.\nA line is empty if it is blank or comment only\n\n:param line: The line to check\n:return: True if the line is empty, False otherwise\n"""\n    return is_comment(line) or line.strip() == ""\n\ndef is_divider(line: str, type: Optional[str] = None) -> bool:"""\nDetermines if a given line is a Markdown divider (horizontal rule).\nMarkdown dividers are three or more hyphens, asterisks, or underscores,\nwithout any other characters except spaces.\n\n:param line: The line to check\n:param type: Which type to match, str. e.g. "*" to match "***" only. Defaults to None, match any of "*", "-" and "_".\n:return: True if the line is a divider, False otherwise\n"""\n    stripped_line = line.strip()\n    if len(stripped_line) < 3:\n        return False\n    if type is None:\n        type = "-*_\