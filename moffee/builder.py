from typing import List, Dict\\nimport os\\nfrom jinja2 import Environment, FileSystemLoader\\nfrom moffee.compositor import Page, PageOption, composite, parse_frontmatter\\nfrom moffee.markdown import md\\nfrom moffee.utils.md_helper import extract_title\\nfrom moffee.utils.file_helper import redirect_paths, copy_assets, merge_directories\\n\\ndef read_options(document_path) -> PageOption:\\n    """Read frontmatter options from the document path"""\\n    with open(document_path, "r") as f:\\n        document = f.read()\\n    _, options = parse_frontmatter(document)\\\n    return options\\n\\ndef retrieve_structure(pages: List[Page]) -> Dict:\\n    headings = []\\n    page_meta = []\\n    for i, page in enumerate(pages):\\n        if page.h1 and (not headings or headings[-1].get("content") != page.h1):\\n            headings.append({"level": 1, "content": page.h1, "page_ids": [i]})\\n            page_meta.append({"h1": page.h1, "h2": None, "h3": None})\\n        elif page.h2 and (not headings or headings[-1].get("content") != page.h2):\\n            headings.append({"level": 2, "content": page.h2, "page_ids": [i]})\\n            page_meta[-1]["h2"] = page.h2\\n        elif page.h3 and (not headings or headings[-1].get("content") != page.h3):\\n            headings.append({"level": 3, "content": page.h3, "page_ids": [i]})\\n            page_meta[-1]["h3"] = page.h3\\n    return {"headings": headings, "page_meta": page_meta}\\n\\ndef render_jinja2(document: str, template_dir) -> str:\\n    """Run jinja2 templating to create html"""\\n    env = Environment(loader=FileSystemLoader(template_dir))\\n    env.filters["markdown"] = md\\n    template = env.get_template("index.html")\\n    pages = composite(document) \\n    title = extract_title(document) or "Untitled"\\n    slide_struct = retrieve_structure(pages) \\n    data = {"title": title, "struct": slide_struct, "slides": [\\\"h1": page.h1, "h2": page.h2, "h3": page.h3, "chunk": page.chunk, "layout": page.option.layout, "styles": page.option.styles}\\\" for page in pages]}\\\"\\n    return template.render(data) \\n\\ndef build(document_path: str, output_dir: str, template_dir: str, theme_dir: str = None):\\n    """Render document, create output directories and write result html."""\\n    with open(document_path) as f:\\n        document = f.read()\\n    asset_dir = os.path.join(output_dir, "assets")\\n    merge_directories(template_dir, output_dir, theme_dir) \\n    options = read_options(document_path) \\n    output_html = render_jinja2(document, output_dir) \\n    output_html = redirect_paths(output_html, document_path=document_path, resource_dir=options.resource_dir) \\n    output_html = copy_assets(output_html, asset_dir).replace(asset_dir, "assets") \\n    output_file = os.path.join(output_dir, "index.html") \\n    with open(output_file, "w", encoding="utf-8") as f:\\n        f.write(output_html) \\n