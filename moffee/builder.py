from typing import List, Dict\"nimport os\"nfrom jinja2 import Environment, FileSystemLoader\"nfrom moffee.compositor import Page, PageOption, composite, parse_frontmatter\"nfrom moffee.markdown import md\"nfrom moffee.utils.md_helper import extract_title\"nfrom moffee.utils.file_helper import redirect_paths, copy_assets, merge_directories\"\"ndef read_options(document_path) -> PageOption:\"""Read frontmatter options from the document path"""\"n    with open(document_path, "r") as f:\"n        document = f.read()\"n    _, options = parse_frontmatter(document)\"n    return options\"\"ndef retrieve_structure(pages: List[Page]) -> Dict:\"""Retrieve the structure of the document"""\"n    headings = []\"n    page_meta = []\"n    for page in pages:\"n        if page.h1:\"n            if not headings or headings[-1].get("content") != page.h1:\"n                headings.append({"level": 1, "content": page.h1, "page_ids": [pages.index(page)]})\"n                page_meta.append({"h1": page.h1, "h2": None, "h3": None})\"n        if page.h2:\"n            if not headings or headings[-1].get("content") != page.h2:\"n                headings.append({"level": 2, "content": page.h2, "page_ids": [pages.index(page)]})\"n                page_meta[-1]["h2"] = page.h2\"n        if page.h3:\"n            if not headings or headings[-1].get("content") != page.h3:\"n                headings.append({"level": 3, "content": page.h3, "page_ids": [pages.index(page)]})\"n                page_meta[-1]["h3"] = page.h3\"n    return {"headings": headings, "page_meta": page_meta}\"\"ndef render_jinja2(document: str, template_dir) -> str:\"""Render the document using Jinja2 template"""\"n    env = Environment(loader=FileSystemLoader(template_dir))\"n    env.filters["markdown"] = md\"n    template = env.get_template("index.html")\"n    pages = composite(document) \"n    title = extract_title(document) or "Untitled"\"n    slide_struct = retrieve_structure(pages) \"n    data = {\"title\": title, \"struct\": slide_struct, \"slides\": [\"h1\": page.h1, \"h2\": page.h2, \"h3\": page.h3, \"chunk\": page.chunk, \"layout\": page.option.layout, \"styles\": page.option.styles} for page in pages]}\"n    return template.render(data) \"\"ndef build(document_path: str, output_dir: str, template_dir: str, theme_dir: str = None):\"""Build the output HTML file"""\"n    with open(document_path) as f:\"n        document = f.read()\"n    asset_dir = os.path.join(output_dir, "assets")\"n    merge_directories(template_dir, output_dir, theme_dir) \"n    options = read_options(document_path) \"n    output_html = render_jinja2(document, output_dir) \"n    output_html = redirect_paths(output_html, document_path=document_path, resource_dir=options.resource_dir) \"n    output_html = copy_assets(output_html, asset_dir).replace(asset_dir, "assets") \"n    output_file = os.path.join(output_dir, "index.html") \"n    with open(output_file, "w", encoding="utf-8") as f:\"n        f.write(output_html) \"n