from typing import List, Dict\\nimport os\\\\\nfrom jinja2 import Environment, FileSystemLoader\\\\\nfrom moffee.compositor import Page, PageOption, composite, parse_frontmatter\\\\\nfrom moffee.markdown import md\\\\\nfrom moffee.utils.md_helper import extract_title\\\\\nfrom moffee.utils.file_helper import redirect_paths, copy_assets, merge_directories\\\\\n\n\ndef read_options(document_path: str) -> PageOption:\"."""Read frontmatter options from the document path"""\\\\\n    with open(document_path, "r") as f:\\\\\n        document = f.read()\\\\\n    _, options = parse_frontmatter(document)\\\\\n    return options\\\\\n\n\ndef retrieve_structure(pages: List[Page]) -> Dict:\"."""Retrieve the structure of the document"""\\\\\n    headings = []\\\\\n    page_meta = []\\\\\n    current_h1 = None\\\\\n    current_h2 = None\\\\\n    current_h3 = None\\\\\n    last_h1_idx = -1\\\\\n    last_h2_idx = -1\\\\\n    last_h3_idx = -1\\\\\n    for i, page in enumerate(pages):\\\\\n        if page.h1:\\\\\n            if current_h1 != page.h1:\\\\\n                current_h1 = page.h1\\\\\n                last_h1_idx = len(headings)\\\\\n                headings.append({"level": 1, "content": page.h1, "page_ids": []})\\\\\n                page_meta.append({"h1": page.h1, "h2": None, "h3": None})\\\\\n        if page.h2:\\\\\n            if current_h2 != page.h2:\\\\\n                current_h2 = page.h2\\\\\n                last_h2_idx = len(headings)\\\\\n                headings.append({"level": 2, "content": page.h2, "page_ids": []})\\\\\n                page_meta[last_h1_idx]["h2"] = page.h2\\\\\n        if page.h3:\\\\\n            if current_h3 != page.h3:\\\\\n                current_h3 = page.h3\\\\\n                last_h3_idx = len(headings)\\\\\n                headings.append({"level": 3, "content": page.h3, "page_ids": []})\\\\\n                page_meta[last_h1_idx]["h3"] = page.h3\\\\\n        if page.h1:\\\\\n            headings[last_h1_idx]["page_ids"].append(i)\\\\\n        if page.h2:\\\\\n            headings[last_h2_idx]["page_ids"].append(i)\\\\\n        if page.h3:\\\\\n            headings[last_h3_idx]["page_ids"].append(i)\\\\\n    return {"headings": headings, "page_meta": page_meta}\\\\\n\n\ndef render_jinja2(document: str, template_dir: str) -> str:\"."""Render the document using Jinja2 template"""\\\\\n    env = Environment(loader=FileSystemLoader(template_dir))\\\\\n    env.filters["markdown"] = md\\\\\n    template = env.get_template("index.html")\\\\\n    pages = composite(document) \\\\\n    title = extract_title(document) or "Untitled"\\\\\n    slide_struct = retrieve_structure(pages) \\\\\n    data = {"title": title, "struct": slide_struct, "slides": [{"h1": page.h1, "h2": page.h2, "h3": page.h3, "chunk": page.chunk, "layout": page.option.layout, "styles": page.option.styles} for page in pages]}\\\\\n    return template.render(data) \\\\\n\n\ndef build(document_path: str, output_dir: str, template_dir: str, theme_dir: str = None):\"."""Build the output HTML file"""\\\\\n    with open(document_path) as f:\\\\\n        document = f.read()\\\\\n    asset_dir = os.path.join(output_dir, "assets")\\\\\n    merge_directories(template_dir, output_dir, theme_dir)\\\\\n    options = read_options(document_path)\\\\\n    output_html = render_jinja2(document, output_dir)\\\\\n    output_html = redirect_paths(output_html, document_path=document_path, resource_dir=options.resource_dir)\\\\\n    output_html = copy_assets(output_html, asset_dir).replace(asset_dir, "assets")\\\\\n    output_file = os.path.join(output_dir, "index.html")\\\\\n    with open(output_file, "w", encoding="utf-8") as f:\\\\\n        f.write(output_html) \\\\\n