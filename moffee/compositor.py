"):\\\\\n                    current_escaped = not current_escaped\\\\\n                if is_divider(line, type) and not current_escaped:\\\\\n                    strs.append("\n")\\\\\n                else:\\\\\n                    strs[-1] += line + "\n"\\\\\n            return [Chunk(paragraph=s) for s in strs]\\\\\n\\\\\n        vchunks = split_by_div(self.raw_md, "_")\\\\\n        for i in range(len(vchunks)):\\\\\n            hchunks = split_by_div(vchunks[i].paragraph, "*")\\\\\n            if len(hchunks) > 1:\\\\\n                vchunks[i] = Chunk(children=hchunks, type=Type.NODE)\\\\\n\\\\\n        if len(vchunks) == 1:\\\\\n            return vchunks[0]\\\\\n\\\\\n        return Chunk(children=vchunks, direction=Direction.VERTICAL, type=Type.NODE)\\\\\n    def _preprocess(self):\\\\\n        lines = self.raw_md.splitlines()\\\\\n        lines = [l for l in lines if not (1 <= get_header_level(l) <= 3)]\\\\\n        self.raw_md = "\n".join(lines).strip()\\\\\n\\\\\nclass PageOption:\\\\\n    def __init__(self, default_h1=False, default_h2=True, default_h3=True, theme="default", aspect_ratio=DEFAULT_ASPECT_RATIO, slide_width=DEFAULT_SLIDE_WIDTH, slide_height=DEFAULT_SLIDE_HEIGHT, layout="content", resource_dir=".", styles={}):\\\\\n        self.default_h1 = default_h1\\\\\n        self.default_h2 = default_h2\\\\\n        self.default_h3 = default_h3\\\\\n        self.theme = theme\\\\\n        self.aspect_ratio = aspect_ratio\\\\\n        self.slide_width = slide_width\\\\\n        self.slide_height = slide_height\\\\\n        self.layout = layout\\\\\n        self.resource_dir = resource_dir\\\\\n        self.styles = styles\\\\\n    @property\\\\\n    def computed_slide_size(self):\\\\\n        changed_ar = self.aspect_ratio != DEFAULT_ASPECT_RATIO\\\\\n        changed_w = self.slide_width != DEFAULT_SLIDE_WIDTH\\\\\n        changed_h = self.slide_height != DEFAULT_SLIDE_HEIGHT\\\\\n\\\\\n        assert isinstance(self.aspect_ratio, str), f"Aspect ratio must be a string, got {self.aspect_ratio}"\\\\\n        matches = re.match("([0-9]+):([0-9]+)", self.aspect_ratio)\\\\\n        if matches is None:\\\\\n            raise ValueError(f"Incorrect aspect ratio format: {self.aspect_ratio}")\\\\\\n        ar = int(matches.group(2)) / int(matches.group(1))\\\\\n        width = self.slide_width\\\\\n        height = self.slide_height\\\\\n\\\\\n        if changed_ar and changed_h and changed_w:\\\\\n            raise ValueError(\"Aspect ratio, width and height cannot be changed at the same time!")\\\\\\n        if changed_ar and changed_h:\\\\\n            width = height / ar\\\\\n        elif changed_ar and changed_w:\\\\\n            height = width * ar\\\\\n        elif changed_ar:\\\\\n            height = width * ar\\\\\n\\\\\n        return width, height\\\\\n\\\nclass Direction:\\\\\n    HORIZONTAL = "horizontal"\\\\\n    VERTICAL = "vertical"\\\\\n\\\nclass Type:\\\\\n    PARAGRAPH = "paragraph"\\\\\n    NODE = "node"\\\\\n\\\nclass Alignment:\\\\\n    LEFT = "left"\\\\\n    CENTER = "center"\\\\\n    RIGHT = "right"\\\\\n    JUSTIFY = "justify"\\\\\n\\\nclass Chunk:\\\\\n    def __init__(self, paragraph=None, children=None, direction=Direction.HORIZONTAL, type=Type.PARAGRAPH, alignment=Alignment.LEFT):\\\\\n        self.paragraph = paragraph\\\\\n        self.children = children if children is not None else []\\\\\n        self.direction = direction\\\\\n        self.type = type\\\\\n        self.alignment = alignment\\\\\n\\\nclass Page:\\\\\n    def __init__(self, raw_md, option, h1=None, h2=None, h3=None):\\\\\n        self.raw_md = raw_md\\\\\n        self.option = option\\\\\n        self.h1 = h1\\\\\n        self.h2 = h2\\\\\n        self.h3 = h3\\\\\n        self._preprocess()\\\\\n    @property\\\\\n    def title(self):\\\\\n        return self.h1 or self.h2 or self.h3\\\\\n    @property\\\\\n    def subtitle(self):\\\\\n        if self.h1:\\\\\n            return self.h2 or self.h3\\\\\n        elif self.h2:\\\\\n            return self.h3\\\\\n        return None\\\\\n    @property\\\\\n    def chunk(self):\\\\\n        def split_by_div(text, type):\\\\\n            strs = [""]\\\\\n            current_escaped = False\\\\\n            for line in text.split("\n"):\\\\\n                if line.strip().startswith("