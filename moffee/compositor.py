from dataclasses import dataclass, field\"import re\"from typing import List, Optional, Tuple, Dict\"from copy import deepcopy\"import yaml\"\n\nDEFAULT_ASPECT_RATIO = "16:9"\nDEFAULT_SLIDE_WIDTH = 720\nDEFAULT_SLIDE_HEIGHT = 405\n\n@dataclass\nclass PageOption:\n    default_h1: bool = False\n    default_h2: bool = True\n    default_h3: bool = True\n    theme: str = "default"\n    aspect_ratio: str = DEFAULT_ASPECT_RATIO\n    slide_width: int = DEFAULT_SLIDE_WIDTH\n    slide_height: int = DEFAULT_SLIDE_HEIGHT\n    layout: str = "content"\n    resource_dir: str = "."\n    styles: dict = field(default_factory=dict)\n\n    @property\n    def computed_slide_size(self) -> Tuple[int, int]:\n        matches = re.match(r"([0-9]+):([0-9]+)", self.aspect_ratio)\n        if not matches:\n            raise ValueError(f"Incorrect aspect ratio format: {self.aspect_ratio}")\n        ar = int(matches.group(2)) / int(matches.group(1))\n        width = self.slide_width\n        height = self.slide_height\n        if self.aspect_ratio != DEFAULT_ASPECT_RATIO:\n            width = self.slide_height / ar\n        return width, height\n\n@dataclass\nclass Chunk:\n    paragraph: Optional[str] = None\n    children: Optional[List["Chunk"]] = field(default_factory=list)\n    direction: str = "horizontal"\n    type: str = "paragraph"\n    alignment: str = "left"\n\n@dataclass\nclass Page:\n    raw_md: str\n    option: PageOption\n    h1: Optional[str] = None\n    h2: Optional[str] = None\n    h3: Optional[str] = None\n\n    def __post_init__(self):\n        self._preprocess()\n\n    @property\n    def title(self) -> Optional[str]:\n        return self.h1 or self.h2 or self.h3\n\n    @property\n    def subtitle(self) -> Optional[str]:\n        if self.h1:\n            return self.h2 or self.h3\n        elif self.h2:\n            return self.h3\n        return None\n\n    @property\n    def chunk(self) -> Chunk:\n        lines = self.raw_md.split("\n")\n        chunks = []\n        current_chunk = Chunk()\n        for line in lines:\n            if line.strip().startswith("#"):\n                if current_chunk.paragraph:\n                    chunks.append(current_chunk)\n                current_chunk = Chunk(paragraph=line.strip(), type="node")\n            else:\n                current_chunk.paragraph += "\n" + line\n        if current_chunk.paragraph:\n            chunks.append(current_chunk)\n        return Chunk(children=chunks)\n\n    def _preprocess(self):\n        lines = self.raw_md.split("\n")\n        self.raw_md = "\n".join([l for l in lines if not (1 <= get_header_level(l) <= 3)])\n\n\ndef parse_frontmatter(document: str) -> Tuple[str, PageOption]:\n    document = document.strip()\n    front_matter = ""\n    content = document\n\n    if document.startswith("---"):\n        parts = document.split("---", 2)\n        if len(parts) >= 3:\n            front_matter = parts[1].strip()\n            content = parts[2].strip()\n\n    try:\n        yaml_data = yaml.safe_load(front_matter) if front_matter else {}\n    except yaml.YAMLError:\n        yaml_data = {}\n\n    option = PageOption()\n    for field in fields(option):\n        name = field.name\n        if name in yaml_data:\n            setattr(option, name, yaml_data.pop(name))\n    option.styles = yaml_data\n\n    return content, option\n\n\ndef parse_deco(line: str, base_option: Optional[PageOption] = None) -> PageOption:\n    pattern = r'(["\']?\w+\b)\s*=\s*([^",\s]+)'\n    matches = re.findall(pattern, line)\n\n    deco = {}\n    for key, value in matches:\n        deco[key] = value\n\n    if base_option is None:\n        base_option = PageOption()\n\n    updated_option = deepcopy(base_option)\n\n    for key, value in deco.items():\n        if hasattr(updated_option, key):\n            setattr(updated_option, key, parse_value(value))\n        else:\n            updated_option.styles[key] = parse_value(value)\n\n    return updated_option\n\n\ndef parse_value(value: str):\n    if value.lower() == "true":\n        return True\n    elif value.lower() == "false":\n        return False\n    elif value.isdigit():\n        return int(value)\n    elif value.replace(".", "", 1).isdigit():\n        return float(value)\n    return value\n\n\ndef composite(document: str) -> List[Page]:\n    pages = []\n    current_page_lines = []\n    current_h1 = current_h2 = current_h3 = None\n\n    document, options = parse_frontmatter(document)\n\n    lines = document.split("\n")\n\n    for line in lines:\n        if line.strip().startswith("#"):\n            if current_page_lines:\n                page = Page(raw_md="\n".join(current_page_lines), option=options, h1=current_h1, h2=current_h2, h3=current_h3)\n                pages.append(page)\n            current_page_lines = []\n            current_h1 = current_h2 = current_h3 = None\n\n        current_page_lines.append(line)\n\n        if line.strip().startswith("#"):\n            if line.startswith("#"):\n                current_h1 = line[1:].strip()\n            elif line.startswith("##"):\n                current_h2 = line[2:].strip()\n            elif line.startswith("###"):\n                current_h3 = line[3:].strip()\n\n    if current_page_lines:\n        page = Page(raw_md="\n".join(current_page_lines), option=options, h1=current_h1, h2=current_h2, h3=current_h3)\n        pages.append(page)\n\n    return pages\n