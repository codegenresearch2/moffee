from typing import List, Dict\n\nclass PageOption:\n    def __init__(self, default_h1: bool = False, default_h2: bool = True, default_h3: bool = True, theme: str = 'default', aspect_ratio: str = '16:9', slide_width: int = 720, slide_height: int = 405, layout: str = 'content', resource_dir: str = '.', styles: Dict = None):\n        self.default_h1 = default_h1\n        self.default_h2 = default_h2\n        self.default_h3 = default_h3\n        self.theme = theme\n        self.aspect_ratio = aspect_ratio\n        self.slide_width = slide_width\n        self.slide_height = slide_height\n        self.layout = layout\n        self.resource_dir = resource_dir\n        self.styles = styles if styles is not None else {}\n\n    @property\n    def computed_slide_size(self) -> (int, int):\n        matches = re.match(r'([0-9]+):([0-9]+)', self.aspect_ratio)\n        if not matches:\n            raise ValueError(f'Incorrect aspect ratio format: {self.aspect_ratio}')\n        ar = int(matches.group(2)) / int(matches.group(1))\n        width = self.slide_width\n        height = self.slide_height\n        if self.aspect_ratio != '16:9':\n            if self.slide_width != 720:\n                height = self.slide_width * ar\n            elif self.slide_height != 405:\n                width = self.slide_height / ar\n        return width, height\n\n\nclass Page:\n    def __init__(self, raw_md: str, option: PageOption, h1: str = None, h2: str = None, h3: str = None):\n        self.raw_md = raw_md\n        self.option = option\n        self.h1 = h1\n        self.h2 = h2\n        self.h3 = h3\n\n    @property\n    def title(self) -> str:\n        return self.h1 or self.h2 or self.h3\n\n    @property\n    def subtitle(self) -> str:\n        if self.h1:\n            return self.h2 or self.h3\n        elif self.h2:\n            return self.h3\n        return None\n\n    @property\n    def chunk(self) -> 'Chunk':\n        # Implementation of chunk splitting logic\n        pass\n\n    def _preprocess(self):\n        # Implementation of preprocessing logic\n        pass\n\n\ndef parse_frontmatter(document: str) -> (str, PageOption):\n    # Implementation of frontmatter parsing logic\n    pass\n\n\ndef parse_deco(line: str, base_option: PageOption = None) -> PageOption:\n    # Implementation of deco parsing logic\n    pass\n\n\ndef parse_value(value: str):\n    # Implementation of value parsing logic\n    pass\n\n\ndef composite(document: str) -> List[Page]:\n    # Implementation of document composition logic\n    pass\n