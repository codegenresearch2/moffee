"):\\\n                    current_escaped = not current_escaped\\\n                if is_divider(line, type) and not current_escaped:\\\n                    strs.append("\n")\\\n                else:\\\n                    strs[-1] += line + "\n"\\\n            return [Chunk(paragraph=s) for s in strs]\\\\n        vchunks = split_by_div(self.raw_md, "_")\\\n        for i in range(len(vchunks)):\\\n            hchunks = split_by_div(vchunks[i].paragraph, "*")\\\n            if len(hchunks) > 1:  # found ***\\\n                vchunks[i] = Chunk(children=hchunks, type=Type.NODE)\\\\n        if len(vchunks) == 1:\\\n            return vchunks[0]\\\n        return Chunk(children=vchunks, direction=Direction.VERTICAL, type=Type.NODE)\\\\n    def _preprocess(self):\\\n        lines = self.raw_md.splitlines()\\\n        lines = [l for l in lines if not (1 <= get_header_level(l) <= 3)]\\\n        self.raw_md = "\n".join(lines).strip()\\\\n\\\ndef parse_frontmatter(document: str) -> Tuple[str, PageOption]:\\\n    document = document.strip()\\\n    front_matter = ""\\\n    content = document\\\n    if document.startswith("---"):\\\n        parts = document.split("---", 2)\\\n        if len(parts) >= 3:\\\n            front_matter = parts[1].strip()\\\n            content = parts[2].strip()\\\n    try:\\\n        yaml_data = yaml.safe_load(front_matter) if front_matter else {}\\\n    except yaml.YAMLError:\\\n        yaml_data = {}\\\n    option = PageOption()\\\n    for field in fields(option):\\\n        name = field.name\\\n        if name in yaml_data:\\\n            setattr(option, name, yaml_data.pop(name))\\\n    option.styles = yaml_data\\\n    return content, option\\\\n\\\ndef parse_deco(line: str, base_option: Optional[PageOption] = None) -> PageOption:\\\n    def parse_key_value_string(s: str) -> dict:\\\n        pattern = r'([\\\w-]+)\s*=\s*((?:"(?:[^"\\]|\\.)*"|\\'(?:[\\\']|\\.)*\\'|[^,]+))'\\\n        matches = re.findall(pattern, s)\\\n        result = {}\\\n        for key, value in matches:\\\n            if (value.startswith("\"") and value.endswith("\"")) or (value.startswith(\"\"") and value.endswith(\"\"")):\\\n                value = value[1:-1].replace(\"\\\"\", "\"").replace(\"\\\"\", "\"")\\\n            result[key] = value.strip()\\\n        return result\\\n    deco_match = re.match(r'^\s*@\((.*?)\)\s*$', line)\\\n    if not deco_match:\\\n        raise ValueError(f"Input line should contain a deco, {line} received.")\\\n    deco_content = deco_match.group(1)\\\n    deco = parse_key_value_string(deco_content)\\\n    if base_option is None:\\\n        base_option = PageOption()\\\n    updated_option = deepcopy(base_option)\\\n    for key, value in deco.items():\\\n        if hasattr(updated_option, key):\\\n            setattr(updated_option, key, parse_value(value))\\\n        else:\\\n            updated_option.styles[key] = parse_value(value)\\\n    return updated_option\\\\n\\\ndef parse_value(value: str):\\\n    if value.lower() == "true":\\\n        return True\\\n    elif value.lower() == "false":\\\n        return False\\\n    elif value.isdigit():\\\n        return int(value)\\\n    elif value.replace(".", "", 1).isdigit():\\\n        return float(value)\\\n    return value\\\\n\\\ndef composite(document: str) -> List[Page]:\\\n    pages: List[Page] = []\\\n    current_page_lines = []\\\n    current_escaped = False\\\n    current_h1 = current_h2 = current_h3 = None\\\n    prev_header_level = 0\\\n    document = rm_comments(document)\\\n    document, options = parse_frontmatter(document)\\\n    lines = document.split("\n")\\\n    def create_page() -> None:\\\n        nonlocal current_page_lines, current_h1, current_h2, current_h3, options\\\n        if all(l.strip() == "" for l in current_page_lines):\\\n            return\\\n        raw_md = ""\\\n        local_option = deepcopy(options)\\\n        for line in current_page_lines:\\\n            if contains_deco(line):\\\n                local_option = parse_deco(line, local_option)\\\n            else:\\\n                raw_md += "\n" + line\\\n        page = Page(raw_md=raw_md, option=local_option, h1=current_h1, h2=current_h2, h3=current_h3)\\\n        pages.append(page)\\\n        current_page_lines = []\\\n        current_h1 = current_h2 = current_h3 = None\\\\n    for _, line in enumerate(lines):\\\n        if line.strip().startswith("